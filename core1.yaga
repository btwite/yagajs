/"
	Core and Yaga definitions that must be loaded at startup.
	The CoreNamespace name .core must be preloaded into the
	core namespace at yaga startup time. All named namespaces
	are defined in the core namespace.
"/

/" Declare the core ristic classes. Note that the names are also defined in the .core namespace "/
(.ristic #.rPrim 	#yaga.core.ristic.PrimRistic)
(.ristic #.rSeq 	#yaga.core.ristic.SeqRistic)
(.ristic #.rInj 	#yaga.core.ristic.InjRistic)
(.ristic #.rPipe 	#yaga.core.ristic.PipeRistic)
(.ristic #.rBind 	#yaga.core.ristic.BindpipeRistic)
(.ristic #.rExpr 	#yaga.core.ristic.ExprRistic)
(.ristic #.rAlias 	#yaga.core.ristic.AliasRistic)

/" 
	Declare the core level define macro .def.
	We also create a backup of .ristic that calls a primitive to answer
	the .ristic binding.
"/
((.rPrim #yaga.core.prim.Core #Define) .def (.rPrim #yaga.core.prim.Core #Define))
(.def .rDotRistic	(.rPrim #yaga.core.prim.Core #DotRistic))
(.def .undef 		(.rPrim #yaga.core.prim.Core #Undefine))

/" Create definitions for .fn and .macro to abstract simple Ristic "/
(.def .PRECDEFAULT		100)
(.def .PRECDEFAULT-1	99)
(.def .PRECDEFAULT-2	98)

(.def .fn 				(.rPipe .PRECDEFAULT))	/" Simple function will assume DefaultPrecedence. "/
(.def .macro 			(.rBind))
(.def .fndef 			(.fn .def))

/" Aliasing. fnAlias is an evaluation function, while .alias is bind time ristic "/
(.def .alias 			(.rAlias))
(.def .fnAlias 			(.fn .alias))
(.def .dealias			(.fn (.rPrim #yaga.core.prim.Core #DeAlias)))

/" 
	Injected Lists. Note that using the Injection ristic will immediately enforce injection
	in the reference list. If this is not the desired outcome then use the .asInjection
	function to answer the parameters as an Injection list.
	Typical use of injection ristic is to create an injection within an expression from a
	binding pipeline. Place ristic at the end of the pipeline. Can also employ injected
	variables which are prefixed with a '^' character. This will force a non single element
	to be injected at the reference position.
"/
(.def .inj			(.rInj))
(.def .asInjection	(.fn .inj))

/" Useful macros to create simple pipelines with defined arguments "/
(.def .fnx 		(.rPipe .PRECDEFAULT (#args #x)))
(.def .fny 		(.rPipe .PRECDEFAULT (#args #y)))
(.def .fnz 		(.rPipe .PRECDEFAULT (#args #z)))
(.def .fnxy 	(.rPipe .PRECDEFAULT (#args #x #y)))
(.def .fnxz 	(.rPipe .PRECDEFAULT (#args #x #z)))
(.def .fnyz 	(.rPipe .PRECDEFAULT (#args #y #z)))
(.def .fnxyz 	(.rPipe .PRECDEFAULT (#args #x #y #z)))

(.def .macx 	(.rBind (#args #x)))
(.def .macy 	(.rBind (#args #y)))
(.def .macz 	(.rBind (#args #z)))
(.def .macxy 	(.rBind (#args #x #y)))
(.def .macxz 	(.rBind (#args #x #z)))
(.def .macyz 	(.rBind (#args #y #z)))
(.def .macxyz 	(.rBind (#args #x #y #z)))

/" Element printing services. Prints to stdout. "/
(.def .rPrint			(.macx (.rPrim #yaga.core.prim.Core #Print x) .alias ))

(.def .print			(.fn (.rPrint 0)))
