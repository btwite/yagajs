((.jsPrim macro jsDefine) define (.jsPrim macro jsDefine))		// Call internal js primitive loader to set up define function
(define function (.jsPrim macro jsFunction))
(define macro (.jsPrim macro jsMacro))
(define parms (.jsPrim macro jsParms))
(define let (.jsPrim macro jsLet))
(define list (.jsPrim function jsList))
(define dictionaryName (.jsPrim macro jsDictName))
(define dictionaryDependsOn (.jsPrim macro jsDictDependsOn))
(define defop (.jsPrim macro jsDefop))
(define call (.jsPrim function jsCall))

(define .assign null)
(define .if null)
(define .or null)
(define .and null)
(define .strictneq null)
(define .stricteq null)
(define .neq null)
(define .eq null)
(define .ge null)
(define .gt null)
(define .le null)
(define .lt null)
(define .sub null)
(define .add (.jsPrim function jsAdd))
(define .rem null)
(define .div null)
(define .mul (.jsPrim function jsMul))
(define .exp null)
(define .pfxdec null)
(define .pfxinc null)
(define .pfxneg null)
(define .postfxdec null)
(define .postfxinc null)

(define .precList 0)

(define .precAssign (.add .precList 5))
(defop '= `(binary ,.precAssign rightToLeft .assign))
(defop '? `(binary ,(.add .precAssign 1) rightToLeft .if))

(define .precLogical (.add .precAssign 3))
(defop '|| `(binary ,.precLogical leftToRight  .or))
(defop '&& `(binary ,(.add .precLogical 1) leftToRight  .and))

(define .precEquality (.add .precLogical 2))
(defop '!== `(binary ,.precEquality leftToRight  .strictneq))
(defop '=== `(binary ,.precEquality leftToRight  .stricteq))
(defop '!=  `(binary ,.precEquality leftToRight  .neq))
(defop '==  `(binary ,.precEquality leftToRight  .eq))

(define .precCompare (.add .precEquality 1))
(defop '>= `(binary ,.precCompare leftToRight  .ge))
(defop '>  `(binary ,.precCompare leftToRight  .gt))
(defop '<= `(binary ,.precCompare leftToRight  .le))
(defop '<  `(binary ,.precCompare leftToRight  .lt))

(define .precAddition (.add .precCompare 1))
(defop '+ `(binary ,.precAddition leftToRight  .add))
// (defop '- `(binary ,.precAddition leftToRight  .sub))	Overloaded - see below

(define .precMultiplication (.add .precAddition 1))
(defop '% `(binary ,.precMultiplication leftToRight  .rem))
(defop '/ `(binary ,.precMultiplication leftToRight  .div))
(defop '* `(binary ,.precMultiplication leftToRight  .mul))
(defop '** `(binary ,(.add .precMultiplication 1) rightToLeft  .exp))

(define .precUnary (.add .precMultiplication 2))
(defop '-- `(prefix ,.precUnary none  .pfxdec)
		  `(postfix ,(.add .precUnary 1) none  .postfxdec))
(defop '++ `(prefix ,.precUnary none  .pfxinc)
		  `(postfix ,(.add .precUnary 1) none  .postfxinc))
(defop '-  `(prefix ,.precUnary none  .pfxneg)
		   `(binary ,.precAddition leftToRight  .sub))

(define .precEnd (.add .precUnary 2))


//(define return (.jsPrim function jsReturn))
//(define break (.jsPrim function jsBreak))
//(define = (.jsPrim function jsSet))
//(define List (function (...args) (return args)))
//(define head (.jsPrim function jsHead))
//(define end (.jsPrim function jsEnd))
//(define front (.jsPrim function jsFront))
//(define tail (.jsPrim function jsTail))
